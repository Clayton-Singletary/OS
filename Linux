ssh student@10.50.39.206 -X
password

**********************************************************************************************************************
Day 1
**********************************************************************************************************************
Basics:
-------
which **to find file locations**
hostname **to find name of linux box**
whoami **to see who your signed in as**
who **tells you whos all logged in on the box**

Network Commands:
-----------------
ifconfig **to see certain network info on that box**
ip neigh **to see mac addrs for device(s)**
ip route/route **shows where the packets are passing threw**
ss **shows established connections/ports**
netstat **does the same as previous but more useful with other options TO.BE.CONT**
  netstat -anop **shows executables connected to stuffs**
sudo iptables -L **firewall rules**
sudo -l **shows all commands user can use with admin privs**IMPORTANT**

Help Commands:
--------------
<command> --help
man <command>

Variables:
----------
a="100" **no spaces**Making a variable**
directories=$(ls -lisa) **command substitution**

Redirections:
-------------
echo "text" > text.txt **places text in a file "overwrites file"**
echo "text" >> test.txt **appends text to a file**
echo random shit 2> text.txt **sends error messages to a file /dev/null to just dump them**

Directories of Importance:
--------------------------
/ **root**
/bin **holds commands**
/sbin **system maintenance  executables**
/home **users home directory**
/usr **user bianaries**
/etc **system configs**
/var **variable data**
/boot **everything with the boot process except configs**
/dev **device files**
/lib **kernel modules and shared libraries**
/mnt **generic mount points**
/proc **processes (pid)**
/opt **?????**
/media **removable media**

Other Useful Commands:
----------------------
id **shows uid, gid, groups*
cat /etc/passwd | grep student **shows etc/passwd entry for student**
cat /etc/group | grep student **shows the groups that specified user is in**
ls -lisa /bin/dd **shows permissions for command**

**********************************************************************************************************************
Day 2
**********************************************************************************************************************
Boot Proccess:
https://git.cybbh.space/os/public/raw/master/images/sysV_systemd_boot_process.png

SysV vs SystemD:
https://git.cybbh.space/os/public/raw/master/images/summarize_diffs_of_sysv_and_systemd.JPG

grub:
Config File - /boot/grub/menu.lst

runlevels:
‘ls -l /etc/rc<1-6>.d’ to see different services run in each runlevel

useful commands:
sudo dmicode - gets system info (alot of it)
sudo dmicode -t bios - gets bios info
lsblk - gets storage device info
sudo xxd -l 512 -g 1 /dev/vda - gets mbr("eb 63" is the start of the drive)

ssh -J user@winops user@linux
****************************************************************************************************************
Day 3
****************************************************************************************************************
Linux validity:

There are two primary processes after startup:
    For kernel-space processes [kthreadd] ( PID = 2 )
    For user-space processes /sbin/init ( PID = 1 )

The kernel processes run in its own memory space.
User mode, in comparison, restricts access to a (usually quite small) subset of memory and safe CPU operations.

Two system calls, fork() and exec(), are important to understanding how processes startup:
    fork() When a process calls fork(), the kernel creates a nearly identical copy of the process.
    exec() When a process calls exec(program), the kernel starts program, replacing the current process.

‘man cron’ - to see an example of a daemon that starts during the boot process
Malicious processes are sometimes orphaned and named to make it look like a daemon process ‘ps --ppid 1 -lf’

    ‘jobs’ - Display List of Jobs running in the background
    ‘fg’ or ‘bg’ - Push / Pull jobs to / from the foreground / background
    ‘kill %<job number>’ - Terminate the process by job number
    ‘[ctrl -z]’ or ‘kill -19’ - stop / suspend the job
    ‘kill -9 <PID>’ or ‘pkill -9 <process name>’
        Stop Process = SIGSTOP(19) (pause signal, let’s you continue later, does not kill process)
        End Process = SIGTERM(15) (termination signal, the right way, the application can intercept this 
            signal and initiate shutdown tasks such as temp file cleanup)
        Kill Process = SIGKILL(9) (kill signal, extreme, only use if SIGTERM doesn’t work, won’t initiate 
            shutdown tasks)

cron daemon checks the directories /var/spool/cron, /etc/cron.d and the file /etc/crontab, once a minute and
    executes any commands specified that match the time.

Two types of cron jobs

    System cron jobs
        run as root and rigidly scheduled
        perform system-wide maintenance tasks (Cleaning out /tmp or rotating logs)
        controlled by /etc/crontab

    User cron jobs
        Use 'crontab’ command to create user cron jobs
        stored in /var/spool/cron/crontabs/

    ‘crontab -u [user] file’ - sets users crontab file to the contents of listed file
    ‘crontab -l -u [user]’ - Displays user’s crontab contents
    ‘crontab -r -u [user]’ - Removes user’s crontab contents
    ‘crontab -e -u [user]’ - edits user’s crontab contents
    crontab jobs run with the permissions of the owner of the crontab file

Cron Syntax

* * * * * /directory/and/command
| | | | |
| | | | +---- Day of the Week   (range: 0-6, 1 = Monday)
| | | +------ Month of the Year (range: 1-12)
| | +-------- Day of the Month  (range: 1-31)
| +---------- Hour              (range: 0-23)
+------------ Minute            (range: 0-59)

---------------------------------------------------------------------------------------------------------
DEMOS:

CRON DEMO:
----------
#view system cron jobs
    ls -l /etc/cron.d

#view system Crontab file
    cat /etc/crontab

#view daily system Cron Jobs
    ls -l /etc/cron.daily

#view user crontab file
    ls -l /var/spool/cron/crontabs

DEAMON DEMO:
------------
#shows user mode deamons(orphans)
    ps --ppid 1 -lf | head

#shows source files for above deamons
    ls -l /etc/init.d/ | head

#seemed important but wasnt explained very well
    ./show-orphan.sh

#I think this can show zombies
    ps -elf | grep -v grep | grep sleep

#two commands to help find anything process related
    top 
    htop <fun tricks>

#
