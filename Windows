usacys - UnitedStatesArmyCyberSchool *if username and password for local machine doesnt work*

10.50.30.246
stach #14

Users - password:
-----------------
andy.dwyer - BurtMacklinFBI
student - password
garviel - luna
bombadil - jolly

**********************************************************************************************************************
Day1 
**********************************************************************************************************************
POWERSHELL:
-----------
get-hosts                           
get-hosts | select-object version   
get-verb
get-command
get-command -type cmdlet | sort -property noun | ft -groupby noun
**Ctrl+L to clear screen without using command**
get-help <cmdlet>
get-alias
set-alias -name ip -value get-netipaddress **sets an alias for netipaddress to ip**not persistant**

***get-process | Get-Member***

(get-process).name                      **for one property**
get-process | select name,id,path | ft  **for multiple properties**
start-process notepad.exe
stop-process -name notepad
get-process | select name,id,path | ?{$_.id -lt '1000'} **id id is less than 1000 print name,id,path of process**
(get-process | select name,id,path | ?{$_.id -lt '1000'}).count **to get the amount of them rather than a list**

Classes:
--------
"Common Information Modules"
get-cimclass *
get-ciminstance -classame win32_logicakdisk
get-ciminstance -classame win32_logicakdisk -filter "drivetype=3" | gm
get-wmiobject -class win32_logicaldisk -filter "drivetype=3"

More Random Stuff:
------------------
get-executionpolicy -list
get-pssessionconfiguration
get-childitem 'hklm:\software\microsoft\windows nt\currentversion\networklist\profiles\'
winrm get winrm/config
get-item wsman:\localhost\client\trustedhosts
set-item wsman:\localhost\client\trustedhosts -value "file-server,domain-controll"
invoke-command -computername file-server {get-service} **gets services on computer "file-server" 

$session = new-pssession -computername File-Server
invoke-command -session $session {get-service}         **^does the same but using a variable**
enter-pssession -session $session   **uses a variable to remote into a system**
$profile | get-member -type noteproperty

**********************************************************************************************************************
Day2 *IMPORTANT FOR FLEET*
**********************************************************************************************************************
Registry:
---------
powershell drives - PSDRIVE:
new-PSDrive -name HKU -PSProvider Registry -Root HKEY_USERS **mounts a registry hive with psdrive**

forensically relevent keys:
* unternet url history
* usb history
* wireless access point history

registry locations used or persistance:
* HKLM\Software\Microsoft\Windows\CurrentVersion\Run
* HKU\<SID>\Software\Microsoft\Windows\CurrentVersion\Run
* HKLM\SYSTEM\CurrentControlSet\services
* HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders
* HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders
* HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon

S-1-5-18,S-1-5-19,S-1-5-20 are service accounts

* HKLM\BCD00000000
    Replacement of old boot.ini file
* HKLM\SAM\SAM
    Use "psexec -s -i regedit" from administrator cmd.exe to view the SAM
* HKU\<SID>\Software\Policies\Microsoft\Windows\System\Scripts
    Group policy Logon/Logoff Scripts defined here

cmd.exe:
--------
ex:reg query hklm\software\microsoft\windows\currentversion\run
   reg add hklm\software\microsoft\windows\currentversion\run /v testkey /t REG_SZ /d C:\windows\system32\WindowsPowershell\v1.0\powershell.exe
   reg query hklm\software\microsoft\windows\currentversion\run
   reg delete hklm\software\microsoft\wondows\currentversion\run /v testkey
   
powershell:
-----------
query:
  get-childitem get-itemproprty get-item
modify/destroy:
  set-itemproperty remove-itemproperty
create:
  new-item new-itemproperty
----------------------------------------
Get-ChildItem HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\run 
Get-Item HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\run

new-item 'HKLM:\SOFTWARE\Microsoft\Office\14.0\security\trusted documents\trustrecords' -force

Syntax:
-------
New-Item -Path $registryPath
New-ItemProperty -Path $registryPath -Name $name -Value $value -PropertyType DWORD
Get-Item -Path $registryPath
Get-ItemProperty -Path $registryPath -Name $name
Remove-ItemProperty -Path $registryPath -Name $name
Remove-Item -Path $registryPath
----------------------------------------------------------------------------------
PSDrive:
--------
mkdir demo
new-PSDrive -name demo -psprovider FileSystem -root C:\demo\
cd demo:
PS Demo:\>        **example of how to make and access a PS Drive**
cd C:\ to exit

get-psdrive **shows generated psdrives available**
new-psdrive -name HKU -psprovider registry -root HKEY_USER **more examples**

new-psdrive -name desktop -psprovider filesystem -root C:\users\student\desktop\
cd desktop:
cd C:\ to exit

New-PSDrive -Name HKLM-Run -PSProvider Registry -Root HKEY_Local_Machine\SOFTWARE\Microsoft\Windows\CurrentVersion\Run
cd HKLM-Run:
cd:\ to exit

[String]$WebDAVShare = '\\live.sysinternals.com\Tools'          
New-PSDrive -Name S -PSProvider FileSystem -Root $WebDAVShare   
cd S:

New-PSDrive -Name FileServer -PSProvider FileSystem -Root "\\file-server\warrior share"

Alternate Data Streams - ADS:
-----------------------------
PS C:\> echo "chow time is not long enough" > survey.txt
PS C:\> gci .\survey.txt
PS C:\> Get-FileHash .\survey.txt
PS C:\> set-content .\survey.txt -value "chow time should be 4 hours long" -stream secret.info
PS C:\> gci .\survey.txt
PS C:\> Get-FileHash .\survey.txt
PS C:\> get-item .\survey.txt -stream * **to see if there is an ADS
PS C:\> get-content .\survey.txt -stream secret.info

**********************************************************************************************************************
Day 3
**********************************************************************************************************************
Boot Process:
BIOS Vs UEFI
------------
BIOS
----
has master boot record
uses boot manager
bcd and os loader

UEFI
----
gpt
bootmgr.efi
bcd and os loader

system is always pid 4

BCDEDIT DEMO:
--------------------------------------------------------------------------
Q: What can I do if the Windows boot settings became corrupted?

A: Fix it with the bcdedit command
BCDEdit command help

c:\demo>bcdedit /?

What does a normal bcdedit output look like?

c:\demo>bcdedit

Windows Boot Manager
--------------------
identifier              {bootmgr}
device                  partition=C:
description             Windows Boot Manager
locale                  en-US
inherit                 {globalsettings}
default                 {current}
resumeobject            {2bd08882-0f8f-11e9-94b6-0002c9550dce}
displayorder            {current}
toolsdisplayorder       {memdiag}
timeout                 29

Windows Boot Loader
-------------------
identifier              {current}
device                  partition=C:
path                    \windows\system32\winload.exe
description             Windows 7 - Tiger Paw
locale                  en-US
inherit                 {bootloadersettings}
recoverysequence        {91061b50-0fa8-11e9-aa6e-00155d49334a}
displaymessageoverride  Recovery
recoveryenabled         Yes
allowedinmemorysettings 0x15000075
osdevice                partition=C:
systemroot              \windows
resumeobject            {2bd08882-0f8f-11e9-94b6-0002c9550dce}
nx                      OptIn
bootmenupolicy          Standard

DEMO BCDEdit
Backup & Restore Current BCD settings

c:\demo>bcdedit /export C:\Lion_BCD
c:\demo>bcdedit /import C:\Lion_BCD

    Whenever you want to make a change to a specific Boot Loader entry use the {Identifier}

Modify Description of Current Boot loader

c:\demo>bcdedit /set {<identifier>} description "Windows 7 - Lion Den" (1)

(1) Point out that the Description is nothing more than a "label"
Create New partition

c:\demo>bcdedit /create {ntldr} /d "Windows XP Pro SP2 - Tiger Paw"

-Specify the Partition

c:\demo>bcdedit /set {ntldr} device partition=C:

-Specify the Path to ntldr

c:\demo>bcdedit /set {ntldr} path \ntldr

-Specify the Display Order

c:\demo>bcdedit /displayorder {ntldr} /addfirst

Now Show the added Partition

c:\demo>bcdedit

Windows Boot Manager
--------------------
identifier              {bootmgr}
device                  partition=C:
description             Windows Boot Manager
locale                  en-US
inherit                 {globalsettings}
default                 {current}
resumeobject            {2bd08882-0f8f-11e9-94b6-0002c9550dce}
displayorder            {ntldr}
                        {current}
toolsdisplayorder       {memdiag}
timeout                 29

Windows Legacy OS Loader
------------------------
identifier              {ntldr}
device                  partition=C:
path                    \ntldr
description             Windows XP Pro SP2 - Tiger Paw

Windows Boot Loader
-------------------
identifier              {current}
device                  partition=C:
path                    \windows\system32\winload.exe
description             Windows 7 - Lion Den
locale                  en-US
inherit                 {bootloadersettings}
recoverysequence        {91061b50-0fa8-11e9-aa6e-00155d49334a}
displaymessageoverride  Recovery
recoveryenabled         Yes
allowedinmemorysettings 0x15000075
osdevice                partition=C:
systemroot              \windows
resumeobject            {2bd08882-0f8f-11e9-94b6-0002c9550dce}
nx                      OptIn
bootmenupolicy          Standard

Delete the Legacy Operating System ( /f = force)

bcdedit /delete {ntldr} /f

Add, Remove & Change Additional Options

    Add Safeboot Value

_Output_Truncated_
Windows Boot Loader
-------------------
identifier              {current}
device                  partition=C:
path                    \windows\system32\winload.exe
description             Windows 7 - Tiger Paw
locale                  en-US
inherit                 {bootloadersettings}
recoverysequence        {91061b50-0fa8-11e9-aa6e-00155d49334a}
displaymessageoverride  Recovery
recoveryenabled         Yes
allowedinmemorysettings 0x15000075
osdevice                partition=C:
systemroot              \windows
resumeobject            {2bd08882-0f8f-11e9-94b6-0002c9550dce}
nx                      OptIn
safeboot                Minimal
bootmenupolicy          Standard

bcdedit /deletevalue {current} safeboot (1)
bcdedit /set {bootmgr} timeout 29 (2)

(1) Will delete the Safeboot value

(2) Will change the Timeout Value
-----------------------------------------------------------------------------------------------------

sc query spooler

*********************************************************************************************************************************************************************************
Day 4
*********************************************************************************************************************************************************************************
Process Validity:

    Q: How do we discover Normal, abnormal, and Hidden Processes and Services?
        Get-Process SMSS,CSRSS,LSASS | Sort -Property Id

    Q: Do boot processes have descriptions?
        Get-Process | Select Name, Id, Description | Sort -Property Id

    Q: Where do the system processes and services normally run from? (C:\Windows\System32)
        Get-Process | Select Name, Id, Path
        Get-Ciminstance Win32_service | Select Name, Processid, Pathname

    Q: Are Priority Levels of processes important?
        Get-Process | Select Name, Priorityclass
        Tasklist /m

    Q: How would malware use Schedule Task?
        schtasks /query | more
        Get-ScheduledTask | Select * | Select -First 5
-------------------------------------------------------------
DEMO:

    (different ways to look threw processes)
get-process
get-process | sort -property id | more
get-process | select name, id, description | sort -property id | more
get-process smss,csrss,lsass | sort -property id

    (if chrome is running or substitute chrome for other running process)
get-process chrome | foreach {$a} {$_.modules} | more
get-process -name "*chrome*" | select-object -expandproperty modules | more
get-process -name "*chrome*" | select-object -expandproperty modules | where-object modulename -like '*chrome*' | more

    (more ways to look threw processes)
get-ciminstance win32_process
get-ciminstance win32_process | get-member                                                 *can possibly tell you the description but not always clear*
get-ciminstance win32_process | select name, processid, parentprocessid                    *can be used to find strange executables spawning from strange executables*

    (ways to look at services)
get-ciminstance win32_service | select name, processid, pathname | ft -wrap | more         
get-service alg | format-list *                                                            *shows a specified service*
get-service | where-object {$_.status -eq "running"}                                       *shows currenty running services*
get-scheduledtask | select * | select -first 1                                             *shows specifically the first scheduled task in the list*

    (command prompt)
tasklist
tasklist /v
tasklist /m | more
tasklist /m /fi "imagename eq chrome.exe"
tasklist /fo:list
tasklist /fo:csv

    (services)
sc query
sc queryex type=service | more
sc queryex type=service state=inactive | more

get-nettcpconnection -state established                                                    *shows established tcp connections*

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
User Account Control (not testable??)

    Registry key is located at "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System"

    Red - Application or publisher blocked by group policy
    Blue & gold - Administrative application
    Blue - Trusted and Authenticode signed application
    Yellow - Unsigned or signed but not trusted application

    asInvoker - The application will run with the same permissions as the process that started it. The application can be elevated to a higher permission level by selecting Run as Administrator.

    requireAdministrator - The application will run with administrator permissions.. The user who starts the application must be a member of the Administrators group. If the opening process is 
    not running with administrative permissions, the system will prompt for credentials.

    highestAvailable - The application will run with the highest permission level that it can. If the user who starts the application is a member of the Administrators group, this option is the
    same as requireAdministrator. If the highest available permission level is higher than the level of the opening process, the system will prompt for credentials.

    Some Windows executables can "auto elevate" without a prompt.
-------------------------------------------------------------------
    Does the file/binary/executable meet these conditions?

        Auto Elvate is True
            ./strings C:\Windows\System32\*.exe -accepteula | select-string -SimpleMatch "autoelevate"

        Digitally Signed
            ./sigcheck -m C:\Windows\System32\slui.exe -accepteula | Select-String -SimpleMatch "level"

        Trusted Directory
            i.e C:\Windows\System32
-------------------------------------------------------------------
DEMOS:

DEMO: View file manifest settings

    ( Map the Sysinternals Command in Powershell)
PS C:\Users\student> net use * http://live.sysinternals.com
PS C:\Users\student> z:

    (View the autoelevate setting of slui)
PS Z:\> ./sigcheck -m C:\Windows\System32\slui.exe

    (View the highest available setting of regedit)
PS Z:\> ./sigcheck -m C:\windows\regedit.exe

    (How to locate Windows executables that have autoelevate in the manifest)
PS Z:\> ./strings –s c:\windows\system32\*.exe | findstr /i autoelevate *didnt work for demo?*
-----------------------------------------------------------------------------------------------------------------------------------------
Sysinternals:

DEMO: Using PPROCMON to Monitor the Windows Boot Process

*Start up the Admin-Station Host and log in as andy.dwyer and open REGEDIT from their Search Bar and Go to HKLM\Software\Microsoft\Windows\CurrentVersion\Run.
*Create a New String Value Called RunME and modify it with c:\windows\notepad.exe
*Go to C:\SysinternalsSuite <Location may be different>
    *Double-Click Procmon.exe. Accept Eula. Go to the File Tab and uncheck Capture Events. Go to the Options tab and Click on Enable Boot Logging.
    *This will enable logging on System Boot. Select Every Second. Restart the System.
*Once the System restarts, open and minimize notepad and then navigate to and double-click Procmon.exe to start it. It will ask to Save the log file.
    *Save the log file to the Desktop. Once all of the Bootlog.pml files are saved, return to Procmon.
    *If the .pml file does not automatically load, go to the File tab and click on OPEN and browse to our Desktop and select the ".pml" file to load.\
*Click on the Tools tab and click on Process Tree.

net use * http://live.sysinternals.com/tools **to mount sys internal tools for use**
******************************************************************************************************************
Day 5
******************************************************************************************************************
Windows Artifacts, Auditing, And Logging:
*****************************************

information from the following artifacts:

    UserAssist
    Windows Background Activity Moderator (BAM)
    Recycle Bin
    Prefetch
    Jump Lists
    Recent Files
    Browser Artifacts

Many artifacts will require the operator use a Security Identifer (SID) to dig in user specific registry locations to enumerate the artifact information.
A few ways to achieve this are provided below:

get-wmiobject win32_useraccount | select name,sid (PowerShell)
Get-LocalUser | select Name,SID (PowerShell)
wmic useraccount get name,sid (CMD.EXE ONLY)

USER ASSIST:
------------
View executable Files run:
Get-ItemProperty 'REGISTRY::HKEY_USERS\*\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\UserAssist\{CEBFF5CD-ACE2-4F4F-9178-9926F41749EA}\Count'
View Shortcut files executed:
Get-ItemProperty 'REGISTRY::HKEY_USERS\*\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\UserAssist\{F4E57C4B-2036-45F0-A9AB-443BCFE33D9F}\Count'

BAM:
----
Get-Itemproperty 'HKLM:\SYSTEM\CurrentControlSet\Services\bam\UserSettings\*' (Windows 1709 & 1803)
Get-Itemproperty 'HKLM:\SYSTEM\CurrentControlSet\Services\bam\state\UserSettings\*' (Windows 1809 and newer)
    **pipe to format-list for human readable output**

RECYCLE BIN:
------------
gci 'C:\$RECYCLE.BIN' -Recurse -Verbose -Force | select *
gci 'C:\$RECYCLE.BIN' -Recurse -Force

PREFETCH:
---------
gci -Path 'C:\Windows\Prefetch' -ErrorAction Continue | select * | select -first 5

JUMP LISTS:
-----------
gci -Recurse C:\Users\*\AppData\Roaming\Microsoft\Windows\Recent -ErrorAction Continue | select FullName, LastAccessTime

RECENT FILES:
-------------
List Files in Recent Docs:
gci 'REGISTRY::HKEY_USERS\*\Software\Microsoft\Windows\CurrentVersion\Explorer\RecentDocs'
Convert File Hex to Unicode:
[System.Text.Encoding]::Unicode.GetString((gp "REGISTRY::HKEY_USERS\*\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\RecentDocs\.txt")."0")
Convert all of a users values from HEX to Unicode:
Get-Item "REGISTRY::HKEY_USERS\*\Software\Microsoft\Windows\CurrentVersion\Explorer\RecentDocs\.txt" | select -Expand property | ForEach-Object { 
    [System.Text.Encoding]::Default.GetString((Get-ItemProperty -Path "REGISTRY::HKEY_USERS\*\Software\Microsoft\Windows\CurrentVersion\Explorer\RecentDocs\.txt"
    -Name $_).$_)}

BROWSER ARTIFACTS:
------------------
.\strings.exe 'C:\Users\<username>\AppData\Local\Google\Chrome\User Data\Default\History'
.\strings.exe 'C:\Users\<username>\AppData\Local\Google\Chrome\User Data\login data'
Find FQDNs in Sqlite Text Files:
$History = (Get-Content 'C:\users\<username>\AppData\Local\Google\Chrome\User Data\Default\History') -replace "[^a-zA-Z0-9\.\:\/]",""
$History| Select-String -Pattern "(https|http):\/\/[a-zA-Z_0-9]+\.\w+[\.]?\w+" -AllMatches|foreach {$_.Matches.Groups[0].Value}| ft

Windows Auditing:
*****************
Application     - Contains events logged by applications.
Security        - Contains events such as valid/ invalid logon attempts and other events related to resource use like creating, opening, or deleting files.
System          - Contains events logged by system components, such as driver failures other system component to load during startup.
CustomLog       - Contains events logged by applications that create a custom log.
                    Using a custom log enables an application to control the size of the log or attach ACLs for security purposes without affecting other applications.

Configure Audit Policy:

    View entire auditpol list
        auditpol /get /category:*

    Set File SYstem subcategory to audit
        auditpol /set /subcategory:"File System"

    Remove File System subcategory auditing
        auditpol /set /subcategory:"File System" /success:disable

    To list the global object access auditing entries set on files or folders:
        auditpol /resourceSACL /type:File /view

    To list the global object access auditing entries set on Registry Keys
        auditpol /resourceSACL /type:Key /view

View/ Analyze Event Logs - GUI:

    eventvwr
        Located in C:\Windows\System32\Winevt folder.
        Locations are configurable.

View/ Analyze Event Logs - CLI:

    show all logs
        wevtutil el

    get log info
        wevtutil gli security

    get last 3 events
        wevtutil qe security /c:3 /f:text

View/ Analyze Event Logs - Powershell:

    View newest 10 System Logs
        Get-EventLog -LogName System -Newest 10

    View the entire message field in the Security Log
        Get-Eventlog -LogName Security | ft -wrap

    Search logs with mutiple criteria
        get-winevent -FilterHashtable @{logname="security";id="4624"} | select -first 5 | ft -wrap


Event IDs to Search for Malicious Actors:

    User Added to Privileged Group
        4728, 4732, 4756

    Security-Enabled group Modification
        4735

    Successful/ Failed User Account Login
        4624, 4625

PowerShell Transcript:

    Allows the capture of the input and output of Windows PowerShell commands into text-based transcripts.
        Start-Transcript

    View Powershell console History
        Get-History

    View entire powershell History
        Get-Content "C:\users\$env:username\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadline\ConsoleHost_history.txt"

Script Block Logging:

    Logging is enabled through the Turn on PowerShell Script Block Logging Group Policy setting in
        Administrative Templates → Windows Components → Windows PowerShell

    Turn on script black logging via the Registry
        reg.exe add HKLM\SOFTWARE\Wow6432Node\Policies\Microsoft\Windows\PowerShell\ScriptBlockLogging\ /v EnableScriptBlockLogging /t REG_DWORD /d 1 /f
